# -*- coding: utf-8 -*-
"""Projeto #2: Previsão de Lucros (sorvetes).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18YbkXP9ecfv4YcV6nGFVE0DWxYO6UvKp

# Definição do problema

- Base de dados:
  - Input (X): Temperatura
  - Output (Y): Lucro diário em dólares

# Etapa 1: Importação das bibliotecas
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
tf.__version__

"""# Etapa 2: Importação da base de dados"""

sales_df = pd.read_csv('SalesData.csv')

sales_df

sales_df.head(5)

sales_df.tail(10)

sales_df.info()

sales_df.describe()

"""# Etapa 3: Visualização da base de dados"""

sns.scatterplot(sales_df['Temperature'], sales_df['Revenue']);

"""# Etapa 4: Criação das variáveis da base de dados"""

X_train = sales_df['Temperature']
y_train = sales_df['Revenue']

X_train.shape

y_train.shape

"""# Etapa 5: Criação e construção do modelo"""

model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units = 10, input_shape = [1]))
model.add(tf.keras.layers.Dense(units = 1))

model.summary()

model.compile(optimizer=tf.keras.optimizers.Adam(0.1), loss = 'mean_squared_error')

epochs_hist = model.fit(X_train, y_train, epochs = 1000)

"""# Etapa 6: Avaliação do modelo"""

epochs_hist.history.keys()

plt.plot(epochs_hist.history['loss'])
plt.title('Model Loss Progress During Training')
plt.xlabel('Epoch')
plt.ylabel('Training Loss')
plt.legend(['Training Loss']);

model.get_weights()

# Previsões com o modelo treinado
temp = 5
revenue = model.predict([temp])
print('Revenue Predictions Using Trained ANN =', revenue)

plt.scatter(X_train, y_train, color = 'gray')
plt.plot(X_train, model.predict(X_train), color = 'red')
plt.ylabel('Revenue [dollars]')
plt.xlabel('Temperature [degC]')
plt.title('Revenue Generated vs. Temperature @Ice Cream Stand');

"""# Etapa 7: Confirmar os resultados usando sklearn"""

X_train.shape

X_train = X_train.values.reshape(-1,1)

X_train.shape

y_train = y_train.values.reshape(-1,1)

y_train.shape

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

regressor.coef_

regressor.intercept_

plt.scatter(X_train, y_train, color = 'gray')
plt.plot(X_train, regressor.predict(X_train), color = 'red')
plt.ylabel('Revenue [dollars]')
plt.xlabel('Temperature [degC]')
plt.title('Revenue Generated vs. Temperature @Ice Cream Stand');

temp = 5
revenue = regressor.predict([[temp]])
print('Revenue Predictions Using Trained ANN =', revenue)